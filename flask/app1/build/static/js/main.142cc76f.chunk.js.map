{"version":3,"sources":["img/m5stack-logo.png","Redux/actions.js","Redux/reducer.js","Redux/store.js","M5Stack/Dispaly.js","M5Stack/App.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","deleteName","type","name","setName","INITIAL_STATE","reducers","combineReducers","user","state","action","store","createStore","console","log","getState","table","App","props","onOpenModal","e","setState","ModalFlag","onCloseModal","displaySwich","Devices","M5Stack_Room1","M5Stack_Room2","M5Stack_Door1","DeviceName","DisplayImg","GraphData","deviceName","StatusFlag_Dis","StatusFlag_Fire","IP","RSSI","Battery","this","nextProps","nextContext","className","src","process","onClick","open","onClose","closeIconSize","center","Component","mapDispatchToProps","connect","handleOnChange","status","target","checked","cmdSent","ButtonDisplay","ButtonFire","handleOnChange1","M5stack_STATUS","cmd_s","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","flag","config3","intervalId","setInterval","getSensorData","bind","data","html","i","length","Devdata","push","id","value","onChange","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oNAAAA,EAAOC,QAAU,IAA0B,0C,sJCK9BC,EAAa,iBAAO,CAC7BC,KAAM,cACNC,KAAM,KAIGC,EAAU,SAAAD,GAAI,MAAK,CAC5BD,KAAM,WACNC,KAAMA,IAGGE,EAAgB,CACzBF,KAAM,UCIGG,EAAWC,YAAgB,CACpCC,KAZY,WAAoC,IAAnCC,EAAkC,uDAA1BJ,EAAeK,EAAW,uCAC/C,OAAQA,EAAOR,MACX,IAAK,WACD,OAAO,eAAIO,EAAX,CAAkBN,KAAMO,EAAOP,OACnC,IAAK,cACD,OAAO,eAAIM,EAAX,CAAkBN,KAAM,KAC5B,QACI,OAAOM,MCZNE,EAAQC,YAAYN,GAMjCO,QAAQC,IAAIH,EAAMI,UAGlBF,QAAQG,MAAML,EAAMI,UAGpBF,QAAQC,WAAWH,EAAMI,UAGzBF,QAAQC,IAAIH,G,kBCTNM,G,kBACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAgBVC,YAAc,SAACC,GACXP,QAAQC,IAAIM,GACZ,EAAKC,SAAS,CAACC,WAAW,KAnBX,EAsBnBC,aAAe,SAACH,GACZ,EAAKC,SAAS,CAACC,WAAW,KAvBX,EA0BnBE,aAAe,WAEX,IAAMC,EAAU,CACZC,cAAe,eACfC,cAAe,eACfC,cAAe,qBAGfH,EAAQ,EAAKhB,MAAMoB,aACnB,EAAKR,SAAL,eACO,EAAKZ,MADZ,CAEIqB,WAAYL,EAAQ,EAAKhB,MAAMoB,gBAnCvC,EAAKpB,MAAQ,CACTa,WAAW,EACXS,UAAW,GACXF,WAAY,EAAKX,MAAMc,WACvBC,eAAgB,EAAKf,MAAMe,eAC3BH,WAAY,mBACZI,gBAAiB,EAAKhB,MAAMgB,gBAC5BC,GAAG,EAAKjB,MAAMiB,GACdC,KAAK,EAAKlB,MAAMkB,KAChBC,QAAQ,EAAKnB,MAAMmB,SAXR,E,kFA+CXC,KAAK7B,MAAMwB,eACXK,KAAKd,eAELc,KAAKjB,SAAL,eACOiB,KAAK7B,MADZ,CAEIqB,WAAY,sBAKhBQ,KAAK7B,MAAMyB,iBACXI,KAAKjB,SAAL,eACOiB,KAAK7B,MADZ,CAEIqB,WAAY,oB,gDAMES,EAAWC,GAEjCF,KAAKjB,SAAL,eACWiB,KAAK7B,MADhB,CAEQwB,eAAgBM,EAAUN,kBAK9BM,EAAUN,eACVK,KAAKd,eAELc,KAAKjB,SAAL,eACOiB,KAAK7B,MADZ,CAEIqB,WAAY,sBAKhBS,EAAUL,iBACVI,KAAKjB,SAAL,eACOiB,KAAK7B,MADZ,CAEIqB,WAAY,oB,+BAQd,IAAD,OAEL,OACI,yBAAKW,UAAW,cACR,+BACI,+BACA,4BACI,4BACI,yBAAKC,IAAG,UAAKC,GAAL,oBAAuCL,KAAK7B,MAAMqB,WAAlD,YAGhB,4BACI,4BACI,uBAAGc,QAAS,SAAAxB,GAAC,OAAG,EAAKD,YAAYC,KAAjC,kCAA4CkB,KAAK7B,MAAMoB,gBAKvE,kBAAC,IAAD,CAAOgB,KAAMP,KAAK7B,MAAMa,UAAWwB,QAAS,SAAA1B,GAAC,OAAI,EAAKG,aAAaH,IAAI2B,cAAe,EAAGC,QAAM,GAC3F,+BACI,+BACA,4BACI,4BACI,iCAAOV,KAAK7B,MAAM0B,MAG1B,4BACI,4BACI,mCAASG,KAAK7B,MAAM2B,QAG5B,4BACI,4BACI,sCAAYE,KAAK7B,MAAM4B,mB,GAlIrCY,cAiJZC,EAAqB,CACvB9C,UACAH,cAGWkD,eATS,SAAA1C,GAAK,MAAK,CAC9BN,KAAMM,EAAMD,KAAKL,QAQmB+C,EAAzBC,CAA6ClC,GCxJtDA,G,kBACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAYVkC,eAAgB,SAAChC,GACb,IAAMiC,EAASjC,EAAEkC,OAAOC,QACpBF,EAGA,EAAKG,QAAQ,UAFb,EAAKA,QAAQ,WAIjB,EAAKnC,SAAL,eACO,EAAKZ,MADZ,CAEIgD,cAAcJ,EACdK,YAAW,MAvBA,EA2BnBC,gBAAiB,SAACvC,GACd,IAAMiC,EAASjC,EAAEkC,OAAOC,QACxB,EAAKC,QAAQ,QACb,EAAKnC,SAAL,eACO,EAAKZ,MADZ,CAEIgD,eAAc,EACdC,WAAWL,MA/Bf,EAAK5C,MAAQ,CACTa,WAAW,EACXS,UAAW,GACX0B,eAAc,EACdC,YAAW,EACXE,eAAe,IAPJ,E,qEAqCXC,GACJC,MAAM,wCAAyC,CAC3CC,OAAQ,OACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChB,kBAAkB,uEAEtBC,KAAKC,KAAKC,UAAU,CAAC,IAAMP,Q,sCAMlB,IAAD,OAgBZ,GAfAC,MAAM,2CAA4C,CAC9CC,OAAQ,OACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChB,kBAAkB,yEAEvBI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAE,GAAI,OACP,EAAKlD,SAAS,CACVuC,eAAeW,EACfb,YAAW,OAInBpB,KAAK7B,MAAMmD,eAAe,GAAG,CAC5B,IAAMY,EAAOlC,KAAK7B,MAAMmD,eAAe,GAAGa,QAC1C5D,QAAQC,IAAI0D,GACZlC,KAAKjB,SAAL,eACOiB,KAAK7B,MADZ,CAEIgD,eAAee,Q,0CAOvBlC,KAAKoC,WAAaC,YAAYrC,KAAKsC,cAAcC,KAAKvC,MAAO,O,+BAGvD,IAAD,OACDwC,EAAOxC,KAAK7B,MAAMmD,eACtB,OACI,6BACQ,gCACI,4BAAI,yBAAKlB,IAAG,UAAKC,GAAL,uBAAZ,aAGR,yBAAKF,UAAW,SACZ,oDAEJ,yBAAKA,UAAW,WACV,WAEE,IADA,IAAMsC,EAAO,GACLC,EAAG,EAAIA,EAAIF,EAAKG,OAAQD,IAAI,CAChC,IAAME,EAAUJ,EAAKE,GACrBD,EAAKI,KACD,kBAAC,EAAD,CACInD,WAAYkD,EAAO,WACnBjD,gBAAiBiD,EAAO,QACxBhD,gBAAmB,EAAKzB,MAAMiD,WAC9BvB,GAAI+C,EAAO,GACX9C,KAAM8C,EAAO,KACb7C,QAAS6C,EAAO,WAI5B,OAAOH,EAfT,IAmBN,yBAAKtC,UAAW,cACZ,+BACI,+BACA,4BACA,4BACI,oDAER,wBAAIA,UAAU,UACV,2BAAO2C,GAAG,gBAAgBlF,KAAK,WAAWC,KAAK,kBAAkBkF,MAAM,2BAAO9B,QAAUjB,KAAK7B,MAAMgD,cAAe6B,SAAU,SAAAlE,GAAC,OAAI,EAAKgC,eAAehC,MACrJ,2BAAOmE,QAAQ,sBAKnB,+BACI,+BACA,4BACA,4BACI,0DAEJ,wBAAI9C,UAAU,UACV,2BAAO2C,GAAG,gBAAgBlF,KAAK,WAAWC,KAAK,kBAAkBkF,MAAM,eAAK9B,QAAUjB,KAAK7B,MAAMiD,WAAY4B,SAAU,SAAAlE,GAAC,OAAI,EAAKuC,gBAAgBvC,MACjJ,2BAAOmE,QAAQ,4B,GAxIzBtC,cAuJZC,EAAqB,CACvB9C,UACAH,cAGWkD,eATS,SAAA1C,GAAK,MAAK,CAC9BN,KAAMM,EAAMD,KAAKL,QAQmB+C,EAAzBC,CAA6ClC,GCzI7CA,E,YApBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDT,MAAQ,GAFE,E,sEAYf,OACI,kBAAC,IAAD,CAAUE,MAAOA,GACb,kBAAC,EAAD,W,GAfEsC,aCKEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1F,QAAQ0F,MAAMA,EAAMC,c","file":"static/js/main.142cc76f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/m5stack-logo.747f22ab.png\";","// actions.js\n// actionはreduxの機能でなく、オブジェクトを作るための純粋なjsの関数です。\n// 下のcloseKabayaの3行をchromeを開き、command + option + iでコンソールを開き貼り付けましょう。\n// その後、console.log(deleteName())で、{type: \"DELETE_NAME\", name: ''}というオブジェクトが生成されるのを確かめましょう。\n\nexport const deleteName = () => ({\n    type: 'DELETE_NAME',\n    name: ''\n});\n\n// 引数nameをとり、{type: \"ADD_NAME\", name: name}を返すjsの関数。\nexport const setName = name => ({\n    type: 'ADD_NAME',\n    name: name,\n});\n\nexport const INITIAL_STATE = {\n    name: 'Nanasi'\n}\n","// reducer.js\n// reduxではglobal stateを巨大なjson(store)として管理します。stateの変更はjsonの書き換えによってのみ管理します。\n// actionは純粋なjsのオブジェクトを作る関数であることを思い出してください。\n// reducerはactionで生成されたオブジェクトを受け取り、巨大なjson(store)を書き換える関数です。\nimport {\n    combineReducers,\n} from 'redux';\n\nimport {INITIAL_STATE} from './actions';\n\nconst reducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'ADD_NAME':\n            return {...state, name: action.name}\n        case 'DELETE_NAME':\n            return {...state, name: ''}\n        default:\n            return state;\n    }\n}\n\nexport const reducers = combineReducers({\n    user: reducer\n})\n\n\n","// store.js\n// storeは巨大なjsonです。storeの中身を取り出すにはgetStateメソッドを使います。\nimport {reducers} from \"./reducer\";\nimport {createStore} from \"redux\";\n\nexport const store = createStore(reducers);\n\n\n\n// エミュレータでcommand + dを押し、enable remote debugをクリックしましょう。\n// debuggerが現れるので、consoleタブをクリックし、エミュレータ上でアプリをcommandd + rで再起動しましょう。\nconsole.log(store.getState);\n\n// arrayやobjectを綺麗に表示したい時はconsole.tableが便利です。\nconsole.table(store.getState);\n\n// storeはjsonです。つまりjsのオブジェクトです。 jsの関数のtypeofでstoreのstateがオブジェクトであることを確かめましょう。\nconsole.log(typeof store.getState);\n\n// storeもまたjsのオブジェクトであり、４つしかメソッドを持たないことを確認しておきましょう。\nconsole.log(store);\n\n","import React, {Component} from 'react'\nimport './Dispaly.css';\nimport Modal from 'react-responsive-modal';\nimport {connect} from 'react-redux';\nimport {setName, deleteName} from '../Redux/actions';\n// import M5Stack_iwai from '../img/M5Stack/M5Stack_iwai.png';\n// import M5Stack_Gray_OFF from '../img/M5Stack/M5Stack_Gray_OFF.png';\n// import M5Stack_interview from '../img/M5Stack/M5Stack_interview.png';\n// import M5Stack_fire from '../img/M5Stack/M5Stack_fire.png';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ModalFlag: false,\n            GraphData: \"\",\n            DeviceName: this.props.deviceName,\n            StatusFlag_Dis: this.props.StatusFlag_Dis,\n            DisplayImg: \"M5Stack_Gray_OFF\",\n            StatusFlag_Fire: this.props.StatusFlag_Fire,\n            IP:this.props.IP,\n            RSSI:this.props.RSSI,\n            Battery:this.props.Battery,\n        };\n\n    }\n\n    モーダルウィンドウのハンドラー\n    onOpenModal = (e) => {\n        console.log(e)\n        this.setState({ModalFlag: true});\n    };\n\n    onCloseModal = (e) => {\n        this.setState({ModalFlag: false});\n    };\n\n    displaySwich = () => {\n\n        const Devices = {\n            M5Stack_Room1: \"M5Stack_iwai\",\n            M5Stack_Room2: \"M5Stack_iwai\",\n            M5Stack_Door1: \"M5Stack_interview\",\n        };\n\n        if (Devices[this.state.DeviceName]) {\n            this.setState({\n                ...this.state,\n                DisplayImg: Devices[this.state.DeviceName],\n            });\n        }\n        ;\n    };\n\n\n    componentWillMount() {\n\n        //画面電源のスイッチ\n        if (this.state.StatusFlag_Dis) {\n            this.displaySwich();\n        } else {\n            this.setState({\n                ...this.state,\n                DisplayImg: \"M5Stack_Gray_OFF\",\n            });\n        }\n\n        //火災警報機のスイッチ\n        if (this.state.StatusFlag_Fire) {\n            this.setState({\n                ...this.state,\n                DisplayImg: \"M5Stack_fire\",\n            });\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        // props.id が変更されたら再フェッチ\n        this.setState({\n                ...this.state,\n                StatusFlag_Dis: nextProps.StatusFlag_Dis,\n            }\n        );\n\n        //画面電源のスイッチ\n        if (nextProps.StatusFlag_Dis) {\n            this.displaySwich();\n        } else {\n            this.setState({\n                ...this.state,\n                DisplayImg: \"M5Stack_Gray_OFF\",\n            });\n        }\n\n        //火災警報機のスイッチ\n        if (nextProps.StatusFlag_Fire) {\n            this.setState({\n                ...this.state,\n                DisplayImg: \"M5Stack_fire\",\n            });\n        }\n\n    }\n\n\n\n    render() {\n\n        return (\n            <div className={\"contentsM5\"}>\n                    <table>\n                        <tbody>\n                        <tr>\n                            <th>\n                                <img src={`${process.env.PUBLIC_URL}/M5Stack/${this.state.DisplayImg}.png`} />\n                            </th>\n                        </tr>\n                        <tr>\n                            <th>\n                                <p onClick={e =>this.onOpenModal(e)}>デバイス名:{this.state.DeviceName}</p>\n                            </th>\n                        </tr>\n                        </tbody>\n                    </table>\n                <Modal open={this.state.ModalFlag} onClose={e => this.onCloseModal(e)} closeIconSize={0} center>\n                    <table>\n                        <tbody>\n                        <tr>\n                            <th>\n                                <p>IP:{this.state.IP}</p>\n                            </th>\n                        </tr>\n                        <tr>\n                            <th>\n                                <p>RSSI:{this.state.RSSI}</p>\n                            </th>\n                        </tr>\n                        <tr>\n                            <th>\n                                <p>Battery:{this.state.Battery}</p>\n                            </th>\n                        </tr>\n                        </tbody>\n                    </table>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    name: state.user.name\n});\n\nconst mapDispatchToProps = {\n    setName,\n    deleteName\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// export default App;\n","import React, {Component} from 'react'\nimport './App.css';\nimport Modal from 'react-responsive-modal';\n\nimport {connect} from 'react-redux';\nimport {setName, deleteName} from '../Redux/actions';\nimport M5stack from './Dispaly';\nimport img from '../img/m5stack-logo.png'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ModalFlag: false,\n            GraphData: \"\",\n            ButtonDisplay:false,\n            ButtonFire:false,\n            M5stack_STATUS:{},\n        };\n\n    }\n\n\n    handleOnChange= (e) => {\n        const status = e.target.checked;\n        if(!status) {\n            this.cmdSent(\"turnOFF\");\n        }else{\n            this.cmdSent(\"turnON\");\n        }\n        this.setState({\n            ...this.state,\n            ButtonDisplay:status,\n            ButtonFire:false,\n        })\n    };\n\n    handleOnChange1= (e) => {\n        const status = e.target.checked;\n        this.cmdSent(\"fire\");\n        this.setState({\n            ...this.state,\n            ButtonDisplay:false,\n            ButtonFire:status,\n        })\n    };\n\n    cmdSent(cmd_s){\n        fetch(\"http://192.168.12.12:8000/M5Stack/CMD\", {\n            method: \"POST\",\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'X-Auth-LABTOKEN':'4s-DpxhYHhLNtCtNryNaW7bBehiYtDnYmYPHB8-SB6MuDa-Mxt6zVWePjtBYjEuxxQ2',\n            },\n            body:JSON.stringify({\"cmd\":cmd_s}\n            )\n        })\n    }\n\n    // マウントされる時\n    getSensorData() {\n        fetch(\"http://192.168.12.12:8000/M5Stack/Status\", {\n            method: \"POST\",\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'X-Auth-LABTOKEN':'4s-DpxhYHhLNtCtNryNaW7bBehiYtDnYmYPHB8-SB6MuDa-Mxt6zVWePjtBYjEuxxQ2',\n            },\n        }).then(res => res.json())\n            .then(json =>\n               this.setState({\n                   M5stack_STATUS:json,\n                   ButtonFire:false,\n               })\n            );\n\n        if(this.state.M5stack_STATUS[0]){\n            const flag = this.state.M5stack_STATUS[0].config3;\n            console.log(flag);\n            this.setState({\n                ...this.state,\n                ButtonDisplay:!flag,\n            })\n        }\n\n    }\n\n    componentDidMount() {\n        this.intervalId = setInterval(this.getSensorData.bind(this), 1000);\n    }\n\n    render() {\n        let data = this.state.M5stack_STATUS;\n        return (\n            <div>\n                    <header>\n                        <h1><img src={`${process.env.PUBLIC_URL}/m5stack-logo.png`}/>MONIFIVE</h1>\n\n                    </header>\n                <div className={\"title\"}>\n                    <h1>M5Stack端末</h1>\n                </div>\n                <div className={\"content\"}>\n                    {(() => {\n                        const html = [];\n                        for(let i =0 ; i < data.length; i++){\n                            const Devdata = data[i];\n                            html.push(\n                                <M5stack\n                                    deviceName={Devdata[\"DeviceName\"]}\n                                    StatusFlag_Dis={!Devdata[\"config3\"]}\n                                    StatusFlag_Fire = {this.state.ButtonFire}\n                                    IP={Devdata[\"IP\"]}\n                                    RSSI={Devdata[\"rssi\"]}\n                                    Battery={Devdata[\"Battery\"]}\n                                />\n                            )\n                        }\n                        return html\n                    })()}\n\n                </div>\n                <div className={\"contorl_m5\"}>\n                    <table>\n                        <tbody>\n                        <tr>\n                        <td>\n                            <h3>Screen画面:</h3>\n                        </td>\n                    <td className=\"switch\">\n                        <input id=\"subscription1\" type=\"checkbox\" name=\"subscriptions[]\" value=\"画面電源\" checked= {this.state.ButtonDisplay} onChange={e => this.handleOnChange(e)}/>\n                        <label htmlFor=\"subscription1\"/>\n                    </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <table>\n                        <tbody>\n                        <tr>\n                        <td>\n                            <h3>火災警報:</h3>\n                        </td>\n                        <td className=\"switch\">\n                            <input id=\"subscription2\" type=\"checkbox\" name=\"subscriptions[]\" value=\"火災\" checked= {this.state.ButtonFire} onChange={e => this.handleOnChange1(e)}/>\n                            <label htmlFor=\"subscription2\"/>\n                        </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    name: state.user.name\n});\n\nconst mapDispatchToProps = {\n    setName,\n    deleteName\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// export default App;\n","import React, {Component} from 'react'\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport { store } from './Redux/store'\nimport M5stack from './M5Stack/App';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n\n    }\n\n\n\n    render() {\n\n        return (\n            <Provider store={store}>\n                <M5stack />\n            </Provider>\n        )\n    }\n}\n\nexport default App;\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}